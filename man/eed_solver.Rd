% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eed_solver.R
\name{eed_solver}
\alias{eed_solver}
\title{Create a ode solver for ecoevolutionary dynamics from an ode with only ecological dynamics}
\usage{
eed_solver(ecodyn, example_inputs = NULL, init_examples = FALSE)
}
\arguments{
\item{ecodyn}{A call to the function specifying ecological dynamics with example inputs
as arguments (see details for how the function should be specified). Can also the function
itself, or the name of a function (of class character), in which case \code{example_inputs} must
not be \code{NULL}.}

\item{example_inputs}{A named list where the names correspond to function arguments
of the function specified in \code{ecodyn} and the elements are example inputs for those
arguments that have the dimensions of the desired system (these could be objects you
were using for testing the \code{ecodyn} function, or vectors, matrices or arrays filled with
\code{NA}s, just make sure they have the correct dimensions, e.g. the first dimension will
generally have a size equal to the number of species you want to simulate for th
\code{Ns} and the \code{traits} arguments -- see details).}

\item{init_examples}{Should the \code{example_inputs} be used as default starting values
for future simulation runs?}
}
\value{
A set of functions that can be used to simulate the ecoevolutionary system. This
object is used by \code{\link[=eed_run]{eed_run()}} to run the simulation.
}
\description{
Create a ode solver for ecoevolutionary dynamics from an ode with only ecological dynamics
}
\examples{
mac_lev <- function(Ns, traits, params, t, ...) {
  ## calculate distance between all pairs of species
  dists <- torch_cdist(traits, traits)
  competition <- torch_exp((-(dists^2) / (2 * params$comp^2)))
  dN_dt <- params$r * Ns * (1 - (torch_sum(Ns * competition, 2, keepdim = TRUE) / params$K))

  return(list(Ns = dN_dt))
}

N_spec <- 20

Ns <- torch_tensor(matrix(1:N_spec, nrow = N_spec, ncol = 1))
## three traits
traits <- torch_randn(N_spec, 3)

params <- list(comp = torch_scalar_tensor(0.5),
               K = torch_scalar_tensor(5),
               r = torch_scalar_tensor(1))
}
